use device_query::{Keycode as DqKey};
use enigo::{Key as EnigoKey};

pub struct KeyboardMapper {}

impl KeyboardMapper {
    /// `Keycode` in `device_query` => `Key` in `Enigo`
    pub fn dq_to_enigo(key_in_dq: DqKey) -> Option<EnigoKey> {
        match key_in_dq {
            // F1-F12
            DqKey::F1 => Some(EnigoKey::F1),
            DqKey::F2 => Some(EnigoKey::F2),
            DqKey::F3 => Some(EnigoKey::F3),
            DqKey::F4 => Some(EnigoKey::F4),
            DqKey::F5 => Some(EnigoKey::F5),
            DqKey::F6 => Some(EnigoKey::F6),
            DqKey::F7 => Some(EnigoKey::F7),
            DqKey::F8 => Some(EnigoKey::F8),
            DqKey::F9 => Some(EnigoKey::F9),
            DqKey::F10 => Some(EnigoKey::F10),
            DqKey::F11 => Some(EnigoKey::F11),
            DqKey::F12 => Some(EnigoKey::F12),
            // 0-9
            DqKey::Key0 => Some(EnigoKey::Layout('0')),
            DqKey::Key1 => Some(EnigoKey::Layout('1')),
            DqKey::Key2 => Some(EnigoKey::Layout('2')),
            DqKey::Key3 => Some(EnigoKey::Layout('3')),
            DqKey::Key4 => Some(EnigoKey::Layout('4')),
            DqKey::Key5 => Some(EnigoKey::Layout('5')),
            DqKey::Key6 => Some(EnigoKey::Layout('6')),
            DqKey::Key7 => Some(EnigoKey::Layout('7')),
            DqKey::Key8 => Some(EnigoKey::Layout('8')),
            DqKey::Key9 => Some(EnigoKey::Layout('9')),
            // A-Z
            DqKey::A => Some(EnigoKey::Layout('A')),
            DqKey::B => Some(EnigoKey::Layout('B')),
            DqKey::C => Some(EnigoKey::Layout('C')),
            DqKey::D => Some(EnigoKey::Layout('D')),
            DqKey::E => Some(EnigoKey::Layout('E')),
            DqKey::F => Some(EnigoKey::Layout('F')),
            DqKey::G => Some(EnigoKey::Layout('G')),
            DqKey::H => Some(EnigoKey::Layout('H')),
            DqKey::I => Some(EnigoKey::Layout('I')),
            DqKey::J => Some(EnigoKey::Layout('J')),
            DqKey::K => Some(EnigoKey::Layout('K')),
            DqKey::L => Some(EnigoKey::Layout('L')),
            DqKey::M => Some(EnigoKey::Layout('M')),
            DqKey::N => Some(EnigoKey::Layout('N')),
            DqKey::O => Some(EnigoKey::Layout('O')),
            DqKey::P => Some(EnigoKey::Layout('P')),
            DqKey::Q => Some(EnigoKey::Layout('Q')),
            DqKey::R => Some(EnigoKey::Layout('R')),
            DqKey::S => Some(EnigoKey::Layout('S')),
            DqKey::T => Some(EnigoKey::Layout('T')),
            DqKey::U => Some(EnigoKey::Layout('U')),
            DqKey::V => Some(EnigoKey::Layout('V')),
            DqKey::W => Some(EnigoKey::Layout('W')),
            DqKey::X => Some(EnigoKey::Layout('X')),
            DqKey::Y => Some(EnigoKey::Layout('Y')),
            DqKey::Z => Some(EnigoKey::Layout('Z')),
            // from left to right, from top to bottom
            DqKey::Escape => Some(EnigoKey::Escape),
            DqKey::Tab => Some(EnigoKey::Tab),
            DqKey::CapsLock => Some(EnigoKey::CapsLock),
            DqKey::LShift | DqKey::RShift => Some(EnigoKey::Shift),
            DqKey::LControl | DqKey::RControl => Some(EnigoKey::Control),
            DqKey::Meta => Some(EnigoKey::Meta),
            DqKey::LAlt | DqKey::RAlt => Some(EnigoKey::Alt),
            DqKey::Space => Some(EnigoKey::Space),
            DqKey::Up => Some(EnigoKey::UpArrow),
            DqKey::Right => Some(EnigoKey::RightArrow),
            DqKey::Down => Some(EnigoKey::DownArrow),
            DqKey::Left => Some(EnigoKey::LeftArrow),
            DqKey::Enter => Some(EnigoKey::Return),
            DqKey::Backspace => Some(EnigoKey::Backspace),
            // DqKey::Insert => None,
            DqKey::Delete => Some(EnigoKey::Delete),
            DqKey::Home => Some(EnigoKey::Home),
            DqKey::PageUp => Some(EnigoKey::PageUp),
            DqKey::PageDown => Some(EnigoKey::PageDown),
            DqKey::End => Some(EnigoKey::End),
            // maybe incorrect, but does correct in typing
            DqKey::Grave => Some(EnigoKey::Layout('`')),
            DqKey::Minus => Some(EnigoKey::Layout('-')),
            DqKey::Equal => Some(EnigoKey::Layout('=')),
            DqKey::LeftBracket => Some(EnigoKey::Layout('[')),
            DqKey::RightBracket => Some(EnigoKey::Layout(']')),
            DqKey::Comma => Some(EnigoKey::Layout(',')),
            DqKey::Dot => Some(EnigoKey::Layout('.')),
            DqKey::Semicolon => Some(EnigoKey::Layout(';')),
            DqKey::Apostrophe => Some(EnigoKey::Layout('\'')),
            DqKey::Slash => Some(EnigoKey::Layout('/')),
            DqKey::BackSlash => Some(EnigoKey::Layout('\\')),
            // belows have no exact target in Enigo but can also use in typing
            DqKey::Numpad0 => Some(EnigoKey::Layout('0')),
            DqKey::Numpad1 => Some(EnigoKey::Layout('1')),
            DqKey::Numpad2 => Some(EnigoKey::Layout('2')),
            DqKey::Numpad3 => Some(EnigoKey::Layout('3')),
            DqKey::Numpad4 => Some(EnigoKey::Layout('4')),
            DqKey::Numpad5 => Some(EnigoKey::Layout('5')),
            DqKey::Numpad6 => Some(EnigoKey::Layout('6')),
            DqKey::Numpad7 => Some(EnigoKey::Layout('7')),
            DqKey::Numpad8 => Some(EnigoKey::Layout('8')),
            DqKey::Numpad9 => Some(EnigoKey::Layout('9')),
            DqKey::NumpadAdd => Some(EnigoKey::Layout('+')),
            DqKey::NumpadSubtract => Some(EnigoKey::Layout('-')),
            DqKey::NumpadMultiply => Some(EnigoKey::Layout('*')),
            DqKey::NumpadDivide => Some(EnigoKey::Layout('/')),
            _ => None
        }
    }

    /// `Key` in `Enigo` => `Keycode` in `device_query`
    pub fn enigo_to_dq(key_in_enigo: EnigoKey) -> Option<DqKey> {
        match key_in_enigo {
            // F1-F12
            EnigoKey::F1 => Some(DqKey::F1),
            EnigoKey::F2 => Some(DqKey::F2),
            EnigoKey::F3 => Some(DqKey::F3),
            EnigoKey::F4 => Some(DqKey::F4),
            EnigoKey::F5 => Some(DqKey::F5),
            EnigoKey::F6 => Some(DqKey::F6),
            EnigoKey::F7 => Some(DqKey::F7),
            EnigoKey::F8 => Some(DqKey::F8),
            EnigoKey::F9 => Some(DqKey::F9),
            EnigoKey::F10 => Some(DqKey::F10),
            EnigoKey::F11 => Some(DqKey::F11),
            EnigoKey::F12 => Some(DqKey::F12),
            // 0-9
            EnigoKey::Layout('0') => Some(DqKey::Key0),
            EnigoKey::Layout('1') => Some(DqKey::Key1),
            EnigoKey::Layout('2') => Some(DqKey::Key2),
            EnigoKey::Layout('3') => Some(DqKey::Key3),
            EnigoKey::Layout('4') => Some(DqKey::Key4),
            EnigoKey::Layout('5') => Some(DqKey::Key5),
            EnigoKey::Layout('6') => Some(DqKey::Key6),
            EnigoKey::Layout('7') => Some(DqKey::Key7),
            EnigoKey::Layout('8') => Some(DqKey::Key8),
            EnigoKey::Layout('9') => Some(DqKey::Key9),
            // A-Z
            EnigoKey::Layout('A') => Some(DqKey::A),
            EnigoKey::Layout('B') => Some(DqKey::B),
            EnigoKey::Layout('C') => Some(DqKey::C),
            EnigoKey::Layout('D') => Some(DqKey::D),
            EnigoKey::Layout('E') => Some(DqKey::E),
            EnigoKey::Layout('F') => Some(DqKey::F),
            EnigoKey::Layout('G') => Some(DqKey::G),
            EnigoKey::Layout('H') => Some(DqKey::H),
            EnigoKey::Layout('I') => Some(DqKey::I),
            EnigoKey::Layout('J') => Some(DqKey::J),
            EnigoKey::Layout('K') => Some(DqKey::K),
            EnigoKey::Layout('L') => Some(DqKey::L),
            EnigoKey::Layout('M') => Some(DqKey::M),
            EnigoKey::Layout('N') => Some(DqKey::N),
            EnigoKey::Layout('O') => Some(DqKey::O),
            EnigoKey::Layout('P') => Some(DqKey::P),
            EnigoKey::Layout('Q') => Some(DqKey::Q),
            EnigoKey::Layout('R') => Some(DqKey::R),
            EnigoKey::Layout('S') => Some(DqKey::S),
            EnigoKey::Layout('T') => Some(DqKey::T),
            EnigoKey::Layout('U') => Some(DqKey::U),
            EnigoKey::Layout('V') => Some(DqKey::V),
            EnigoKey::Layout('W') => Some(DqKey::W),
            EnigoKey::Layout('X') => Some(DqKey::X),
            EnigoKey::Layout('Y') => Some(DqKey::Y),
            EnigoKey::Layout('Z') => Some(DqKey::Z),
            // from left to right, from top to bottom
            EnigoKey::Escape => Some(DqKey::Escape),
            EnigoKey::Tab => Some(DqKey::Tab),
            EnigoKey::CapsLock => Some(DqKey::CapsLock),
            EnigoKey::Shift => Some(DqKey::LShift),
            EnigoKey::Control => Some(DqKey::LControl),
            EnigoKey::Meta => Some(DqKey::Meta),
            EnigoKey::Alt => Some(DqKey::LAlt),
            EnigoKey::Space => Some(DqKey::Space),
            EnigoKey::UpArrow => Some(DqKey::Up),
            EnigoKey::RightArrow => Some(DqKey::Right),
            EnigoKey::DownArrow => Some(DqKey::Down),
            EnigoKey::LeftArrow => Some(DqKey::Left),
            EnigoKey::Return => Some(DqKey::Enter),
            EnigoKey::Backspace => Some(DqKey::Backspace),
            // DqKey::Insert => None,
            EnigoKey::Delete => Some(DqKey::Delete),
            EnigoKey::Home => Some(DqKey::Home),
            EnigoKey::PageUp => Some(DqKey::PageUp),
            EnigoKey::PageDown => Some(DqKey::PageDown),
            EnigoKey::End => Some(DqKey::End),
            // maybe incorrect, but does correct in typing
            EnigoKey::Layout('`') => Some(DqKey::Grave),
            EnigoKey::Layout('-') => Some(DqKey::Minus),
            EnigoKey::Layout('=') => Some(DqKey::Equal),
            EnigoKey::Layout('[') => Some(DqKey::LeftBracket),
            EnigoKey::Layout(']') => Some(DqKey::RightBracket),
            EnigoKey::Layout(',') => Some(DqKey::Comma),
            EnigoKey::Layout('.') => Some(DqKey::Dot),
            EnigoKey::Layout(';') => Some(DqKey::Semicolon),
            EnigoKey::Layout('\'') => Some(DqKey::Apostrophe),
            EnigoKey::Layout('/') => Some(DqKey::Slash),
            EnigoKey::Layout('\\') => Some(DqKey::BackSlash),
            // belows have no exact target in Enigo but can also use in typing
            EnigoKey::Layout('+') => Some(DqKey::NumpadAdd),
            EnigoKey::Layout('*') => Some(DqKey::NumpadMultiply),
            _ => None
        }
    }

    /// `Keycode` in `device_query` => `code` in frontend
    pub fn dq_to_front(key_in_dq: DqKey) -> Option<&'static str> {
        match key_in_dq {
            // F1-F12
            DqKey::F1 => Some("F1"),
            DqKey::F2 => Some("F2"),
            DqKey::F3 => Some("F3"),
            DqKey::F4 => Some("F4"),
            DqKey::F5 => Some("F5"),
            DqKey::F6 => Some("F6"),
            DqKey::F7 => Some("F7"),
            DqKey::F8 => Some("F8"),
            DqKey::F9 => Some("F9"),
            DqKey::F10 => Some("F10"),
            DqKey::F11 => Some("F11"),
            DqKey::F12 => Some("F12"),
            // 0-9
            DqKey::Key0 => Some("Digit0"),
            DqKey::Key1 => Some("Digit1"),
            DqKey::Key2 => Some("Digit2"),
            DqKey::Key3 => Some("Digit3"),
            DqKey::Key4 => Some("Digit4"),
            DqKey::Key5 => Some("Digit5"),
            DqKey::Key6 => Some("Digit6"),
            DqKey::Key7 => Some("Digit7"),
            DqKey::Key8 => Some("Digit8"),
            DqKey::Key9 => Some("Digit9"),
            // A-Z
            DqKey::A => Some("KeyA"),
            DqKey::B => Some("KeyB"),
            DqKey::C => Some("KeyC"),
            DqKey::D => Some("KeyD"),
            DqKey::E => Some("KeyE"),
            DqKey::F => Some("KeyF"),
            DqKey::G => Some("KeyG"),
            DqKey::H => Some("KeyH"),
            DqKey::I => Some("KeyI"),
            DqKey::J => Some("KeyJ"),
            DqKey::K => Some("KeyK"),
            DqKey::L => Some("KeyL"),
            DqKey::M => Some("KeyM"),
            DqKey::N => Some("KeyN"),
            DqKey::O => Some("KeyO"),
            DqKey::P => Some("KeyP"),
            DqKey::Q => Some("KeyQ"),
            DqKey::R => Some("KeyR"),
            DqKey::S => Some("KeyS"),
            DqKey::T => Some("KeyT"),
            DqKey::U => Some("KeyU"),
            DqKey::V => Some("KeyV"),
            DqKey::W => Some("KeyW"),
            DqKey::X => Some("KeyX"),
            DqKey::Y => Some("KeyY"),
            DqKey::Z => Some("KeyZ"),
            // from left to right, from top to bottom
            DqKey::Escape => Some("Escape"),
            DqKey::Tab => Some("Tab"),
            DqKey::CapsLock => Some("CapsLock"),
            DqKey::LShift => Some("ShiftLeft"),
            DqKey::RShift => Some("ShiftRight"),
            DqKey::LControl => Some("ControlLeft"),
            DqKey::RControl => Some("ControlRight"),
            DqKey::Meta => Some("MetaLeft"),
            DqKey::LAlt => Some("AltLeft"),
            DqKey::RAlt => Some("AltRight"),
            DqKey::Space => Some("Space"),
            DqKey::Up => Some("ArrowUp"),
            DqKey::Right => Some("ArrowRight"),
            DqKey::Down => Some("ArrowDown"),
            DqKey::Left => Some("ArrowLeft"),
            DqKey::Enter => Some("Enter"),
            DqKey::Backspace => Some("Backspace"),
            // DqKey::Insert => None,
            DqKey::Delete => Some("Delete"),
            DqKey::Home => Some("Home"),
            DqKey::PageUp => Some("PageUp"),
            DqKey::PageDown => Some("PageDown"),
            DqKey::End => Some("End"),
            // maybe incorrect, but does correct in typing
            DqKey::Grave => Some("Backquote"),
            DqKey::Minus => Some("Minus"),
            DqKey::Equal => Some("Equal"),
            DqKey::LeftBracket => Some("BracketLeft"),
            DqKey::RightBracket => Some("BracketRight"),
            DqKey::Comma => Some("Comma"),
            DqKey::Dot => Some("Period"),
            DqKey::Semicolon => Some("Semicolon"),
            DqKey::Apostrophe => Some("Quote"),
            DqKey::Slash => Some("Slash"),
            DqKey::BackSlash => Some("BackSlash"),
            // belows have no exact target in Enigo but can also use in typing
            DqKey::Numpad0 => Some("Numpad0"),
            DqKey::Numpad1 => Some("Numpad1"),
            DqKey::Numpad2 => Some("Numpad2"),
            DqKey::Numpad3 => Some("Numpad3"),
            DqKey::Numpad4 => Some("Numpad4"),
            DqKey::Numpad5 => Some("Numpad5"),
            DqKey::Numpad6 => Some("Numpad6"),
            DqKey::Numpad7 => Some("Numpad7"),
            DqKey::Numpad8 => Some("Numpad8"),
            DqKey::Numpad9 => Some("Numpad9"),
            DqKey::NumpadAdd => Some("NumpadAdd"),
            DqKey::NumpadSubtract => Some("NumpadSubtract"),
            DqKey::NumpadMultiply => Some("NumpadMultiply"),
            DqKey::NumpadDivide => Some("NumpadDivide"),
            _ => None
        }
    }

    /// `code` in frontend => `Keycode` in `device_query`
    pub fn front_to_dq(code_in_front: &str) -> Option<DqKey> {
        match code_in_front {
            // F1-F12
            "F1" => Some(DqKey::F1),
            "F2" => Some(DqKey::F2),
            "F3" => Some(DqKey::F3),
            "F4" => Some(DqKey::F4),
            "F5" => Some(DqKey::F5),
            "F6" => Some(DqKey::F6),
            "F7" => Some(DqKey::F7),
            "F8" => Some(DqKey::F8),
            "F9" => Some(DqKey::F9),
            "F10" => Some(DqKey::F10),
            "F11" => Some(DqKey::F11),
            "F12" => Some(DqKey::F12),
            // 0-9
            "Digit0" => Some(DqKey::Key0),
            "Digit1" => Some(DqKey::Key1),
            "Digit2" => Some(DqKey::Key2),
            "Digit3" => Some(DqKey::Key3),
            "Digit4" => Some(DqKey::Key4),
            "Digit5" => Some(DqKey::Key5),
            "Digit6" => Some(DqKey::Key6),
            "Digit7" => Some(DqKey::Key7),
            "Digit8" => Some(DqKey::Key8),
            "Digit9" => Some(DqKey::Key9),
            // A-Z
            "KeyA" => Some(DqKey::A),
            "KeyB" => Some(DqKey::B),
            "KeyC" => Some(DqKey::C),
            "KeyD" => Some(DqKey::D),
            "KeyE" => Some(DqKey::E),
            "KeyF" => Some(DqKey::F),
            "KeyG" => Some(DqKey::G),
            "KeyH" => Some(DqKey::H),
            "KeyI" => Some(DqKey::I),
            "KeyJ" => Some(DqKey::J),
            "KeyK" => Some(DqKey::K),
            "KeyL" => Some(DqKey::L),
            "KeyM" => Some(DqKey::M),
            "KeyN" => Some(DqKey::N),
            "KeyO" => Some(DqKey::O),
            "KeyP" => Some(DqKey::P),
            "KeyQ" => Some(DqKey::Q),
            "KeyR" => Some(DqKey::R),
            "KeyS" => Some(DqKey::S),
            "KeyT" => Some(DqKey::T),
            "KeyU" => Some(DqKey::U),
            "KeyV" => Some(DqKey::V),
            "KeyW" => Some(DqKey::W),
            "KeyX" => Some(DqKey::X),
            "KeyY" => Some(DqKey::Y),
            "KeyZ" => Some(DqKey::Z),
            // from left to right, from top to bottom
            "Escape" => Some(DqKey::Escape),
            "Tab" => Some(DqKey::Tab),
            "CapsLock" => Some(DqKey::CapsLock),
            "ShiftLeft" => Some(DqKey::LShift),
            "ShiftRight" => Some(DqKey::RShift),
            "ControlLeft" => Some(DqKey::LControl),
            "ControlRight" => Some(DqKey::RControl),
            "MetaLeft" => Some(DqKey::Meta),
            "AltLeft" => Some(DqKey::LAlt),
            "AltRight" => Some(DqKey::RAlt),
            "Space" => Some(DqKey::Space),
            "ArrowUp" => Some(DqKey::Up),
            "ArrowRight" => Some(DqKey::Right),
            "ArrowDown" => Some(DqKey::Down),
            "ArrowLeft" => Some(DqKey::Left),
            "Enter" => Some(DqKey::Enter),
            "Backspace" => Some(DqKey::Backspace),
            // DqKey::Insert => None,
            "Delete" => Some(DqKey::Delete),
            "Home" => Some(DqKey::Home),
            "PageUp" => Some(DqKey::PageUp),
            "PageDown" => Some(DqKey::PageDown),
            "End" => Some(DqKey::End),
            // maybe incorrect, but does correct in typing
            "Backquote" => Some(DqKey::Grave),
            "Minus" => Some(DqKey::Minus),
            "Equal" => Some(DqKey::Equal),
            "BracketLeft" => Some(DqKey::LeftBracket),
            "BracketRight" => Some(DqKey::RightBracket),
            "Comma" => Some(DqKey::Comma),
            "Period" => Some(DqKey::Dot),
            "Semicolon" => Some(DqKey::Semicolon),
            "Quote" => Some(DqKey::Apostrophe),
            "Slash" => Some(DqKey::Slash),
            "BackSlash" => Some(DqKey::BackSlash),
            // belows have no exact target in Enigo but can also use in typing
            "Numpad0" => Some(DqKey::Numpad0),
            "Numpad1" => Some(DqKey::Numpad1),
            "Numpad2" => Some(DqKey::Numpad2),
            "Numpad3" => Some(DqKey::Numpad3),
            "Numpad4" => Some(DqKey::Numpad4),
            "Numpad5" => Some(DqKey::Numpad5),
            "Numpad6" => Some(DqKey::Numpad6),
            "Numpad7" => Some(DqKey::Numpad7),
            "Numpad8" => Some(DqKey::Numpad8),
            "Numpad9" => Some(DqKey::Numpad9),
            "NumpadAdd" => Some(DqKey::NumpadAdd),
            "NumpadSubtract" => Some(DqKey::NumpadSubtract),
            "NumpadMultiply" => Some(DqKey::NumpadMultiply),
            "NumpadDivide" => Some(DqKey::NumpadDivide),
            _ => None
        }
    }

    /// `Key` in `Enigo` => `code` in frontend
    pub fn enigo_to_front(key_in_enigo: EnigoKey) -> Option<&'static str> {
        match key_in_enigo {
            // F1-F12
            EnigoKey::F1 => Some("F1"),
            EnigoKey::F2 => Some("F2"),
            EnigoKey::F3 => Some("F3"),
            EnigoKey::F4 => Some("F4"),
            EnigoKey::F5 => Some("F5"),
            EnigoKey::F6 => Some("F6"),
            EnigoKey::F7 => Some("F7"),
            EnigoKey::F8 => Some("F8"),
            EnigoKey::F9 => Some("F9"),
            EnigoKey::F10 => Some("F10"),
            EnigoKey::F11 => Some("F11"),
            EnigoKey::F12 => Some("F12"),
            // 0-9
            EnigoKey::Layout('0') => Some("Digit0"),
            EnigoKey::Layout('1') => Some("Digit1"),
            EnigoKey::Layout('2') => Some("Digit2"),
            EnigoKey::Layout('3') => Some("Digit3"),
            EnigoKey::Layout('4') => Some("Digit4"),
            EnigoKey::Layout('5') => Some("Digit5"),
            EnigoKey::Layout('6') => Some("Digit6"),
            EnigoKey::Layout('7') => Some("Digit7"),
            EnigoKey::Layout('8') => Some("Digit8"),
            EnigoKey::Layout('9') => Some("Digit9"),
            // A-Z
            EnigoKey::Layout('A') => Some("KeyA"),
            EnigoKey::Layout('B') => Some("KeyB"),
            EnigoKey::Layout('C') => Some("KeyC"),
            EnigoKey::Layout('D') => Some("KeyD"),
            EnigoKey::Layout('E') => Some("KeyE"),
            EnigoKey::Layout('F') => Some("KeyF"),
            EnigoKey::Layout('G') => Some("KeyG"),
            EnigoKey::Layout('H') => Some("KeyH"),
            EnigoKey::Layout('I') => Some("KeyI"),
            EnigoKey::Layout('J') => Some("KeyJ"),
            EnigoKey::Layout('K') => Some("KeyK"),
            EnigoKey::Layout('L') => Some("KeyL"),
            EnigoKey::Layout('M') => Some("KeyM"),
            EnigoKey::Layout('N') => Some("KeyN"),
            EnigoKey::Layout('O') => Some("KeyO"),
            EnigoKey::Layout('P') => Some("KeyP"),
            EnigoKey::Layout('Q') => Some("KeyQ"),
            EnigoKey::Layout('R') => Some("KeyR"),
            EnigoKey::Layout('S') => Some("KeyS"),
            EnigoKey::Layout('T') => Some("KeyT"),
            EnigoKey::Layout('U') => Some("KeyU"),
            EnigoKey::Layout('V') => Some("KeyV"),
            EnigoKey::Layout('W') => Some("KeyW"),
            EnigoKey::Layout('X') => Some("KeyX"),
            EnigoKey::Layout('Y') => Some("KeyY"),
            EnigoKey::Layout('Z') => Some("KeyZ"),
            // from left to right, from top to bottom
            EnigoKey::Escape => Some("Escape"),
            EnigoKey::Tab => Some("Tab"),
            EnigoKey::CapsLock => Some("CapsLock"),
            EnigoKey::Shift => Some("ShiftLeft"),
            EnigoKey::Control => Some("ControlLeft"),
            EnigoKey::Meta => Some("MetaLeft"),
            EnigoKey::Alt => Some("AltLeft"),
            EnigoKey::Space => Some("Space"),
            EnigoKey::UpArrow => Some("ArrowUp"),
            EnigoKey::RightArrow => Some("ArrowRight"),
            EnigoKey::DownArrow => Some("ArrowDown"),
            EnigoKey::LeftArrow => Some("ArrowLeft"),
            EnigoKey::Return => Some("Enter"),
            EnigoKey::Backspace => Some("Backspace"),
            // DqKey::Insert => None,
            EnigoKey::Delete => Some("Delete"),
            EnigoKey::Home => Some("Home"),
            EnigoKey::PageUp => Some("PageUp"),
            EnigoKey::PageDown => Some("PageDown"),
            EnigoKey::End => Some("End"),
            // maybe incorrect, but does correct in typing
            EnigoKey::Layout('`') => Some("Backquote"),
            EnigoKey::Layout('-') => Some("Minus"),
            EnigoKey::Layout('=') => Some("Equal"),
            EnigoKey::Layout('[') => Some("BracketLeft"),
            EnigoKey::Layout(']') => Some("BracketRight"),
            EnigoKey::Layout(',') => Some("Comma"),
            EnigoKey::Layout('.') => Some("Period"),
            EnigoKey::Layout(';') => Some("Semicolon"),
            EnigoKey::Layout('\'') => Some("Quote"),
            EnigoKey::Layout('/') => Some("Slash"),
            EnigoKey::Layout('\\') => Some("BackSlash"),
            // belows have no exact target in Enigo but can also use in typing
            EnigoKey::Layout('+') => Some("NumpadAdd"),
            EnigoKey::Layout('*') => Some("NumpadMultiply"),
            _ => None
        }
    }

    /// `code` in frontend => `Key` in `Enigo`
    pub fn front_to_enigo(code_in_front: &str) -> Option<EnigoKey> {
        match code_in_front {
            // F1-F12
            "F1" => Some(EnigoKey::F1),
            "F2" => Some(EnigoKey::F2),
            "F3" => Some(EnigoKey::F3),
            "F4" => Some(EnigoKey::F4),
            "F5" => Some(EnigoKey::F5),
            "F6" => Some(EnigoKey::F6),
            "F7" => Some(EnigoKey::F7),
            "F8" => Some(EnigoKey::F8),
            "F9" => Some(EnigoKey::F9),
            "F10" => Some(EnigoKey::F10),
            "F11" => Some(EnigoKey::F11),
            "F12" => Some(EnigoKey::F12),
            // 0-9
            "Digit0" | "Numpad0" => Some(EnigoKey::Layout('0')),
            "Digit1" | "Numpad1" => Some(EnigoKey::Layout('1')),
            "Digit2" | "Numpad2" => Some(EnigoKey::Layout('2')),
            "Digit3" | "Numpad3" => Some(EnigoKey::Layout('3')),
            "Digit4" | "Numpad4" => Some(EnigoKey::Layout('4')),
            "Digit5" | "Numpad5" => Some(EnigoKey::Layout('5')),
            "Digit6" | "Numpad6" => Some(EnigoKey::Layout('6')),
            "Digit7" | "Numpad7" => Some(EnigoKey::Layout('7')),
            "Digit8" | "Numpad8" => Some(EnigoKey::Layout('8')),
            "Digit9" | "Numpad9" => Some(EnigoKey::Layout('9')),
            // A-Z
            "KeyA" => Some(EnigoKey::Layout('A')),
            "KeyB" => Some(EnigoKey::Layout('B')),
            "KeyC" => Some(EnigoKey::Layout('C')),
            "KeyD" => Some(EnigoKey::Layout('D')),
            "KeyE" => Some(EnigoKey::Layout('E')),
            "KeyF" => Some(EnigoKey::Layout('F')),
            "KeyG" => Some(EnigoKey::Layout('G')),
            "KeyH" => Some(EnigoKey::Layout('H')),
            "KeyI" => Some(EnigoKey::Layout('I')),
            "KeyJ" => Some(EnigoKey::Layout('J')),
            "KeyK" => Some(EnigoKey::Layout('K')),
            "KeyL" => Some(EnigoKey::Layout('L')),
            "KeyM" => Some(EnigoKey::Layout('M')),
            "KeyN" => Some(EnigoKey::Layout('N')),
            "KeyO" => Some(EnigoKey::Layout('O')),
            "KeyP" => Some(EnigoKey::Layout('P')),
            "KeyQ" => Some(EnigoKey::Layout('Q')),
            "KeyR" => Some(EnigoKey::Layout('R')),
            "KeyS" => Some(EnigoKey::Layout('S')),
            "KeyT" => Some(EnigoKey::Layout('T')),
            "KeyU" => Some(EnigoKey::Layout('U')),
            "KeyV" => Some(EnigoKey::Layout('V')),
            "KeyW" => Some(EnigoKey::Layout('W')),
            "KeyX" => Some(EnigoKey::Layout('X')),
            "KeyY" => Some(EnigoKey::Layout('Y')),
            "KeyZ" => Some(EnigoKey::Layout('Z')),
            // from left to right, from top to bottom
            "Escape" => Some(EnigoKey::Escape),
            "Tab" => Some(EnigoKey::Tab),
            "CapsLock" => Some(EnigoKey::CapsLock),
            "ShiftLeft" | "ShiftRight" => Some(EnigoKey::Shift),
            "ControlLeft" | "ControlRight" => Some(EnigoKey::Control),
            "MetaLeft" | "MetaRight" => Some(EnigoKey::Meta),
            "AltLeft" | "AltRight" => Some(EnigoKey::Alt),
            "Space" => Some(EnigoKey::Space),
            "ArrowUp" => Some(EnigoKey::UpArrow),
            "ArrowRight" => Some(EnigoKey::RightArrow),
            "ArrowDown" => Some(EnigoKey::DownArrow),
            "ArrowLeft" => Some(EnigoKey::LeftArrow),
            "Enter" => Some(EnigoKey::Return),
            "Backspace" => Some(EnigoKey::Backspace),
            // DqKey::Insert => None,
            "Delete" => Some(EnigoKey::Delete),
            "Home" => Some(EnigoKey::Home),
            "PageUp" => Some(EnigoKey::PageUp),
            "PageDown" => Some(EnigoKey::PageDown),
            "End" => Some(EnigoKey::End),
            // maybe incorrect, but does correct in typing
            "Backquote" => Some(EnigoKey::Layout('`')),
            "Minus" | "NumpadSubtract" => Some(EnigoKey::Layout('-')),
            "Equal" => Some(EnigoKey::Layout('=')),
            "BracketLeft" => Some(EnigoKey::Layout('[')),
            "BracketRight" => Some(EnigoKey::Layout(']')),
            "Comma" => Some(EnigoKey::Layout(',')),
            "Period" => Some(EnigoKey::Layout('.')),
            "Semicolon" => Some(EnigoKey::Layout(';')),
            "Quote" => Some(EnigoKey::Layout('\'')),
            "Slash" | "NumpadDivide" => Some(EnigoKey::Layout('/')),
            "BackSlash" => Some(EnigoKey::Layout('\\')),
            // belows have no exact target in Enigo but can also use in typing
            "NumpadAdd" => Some(EnigoKey::Layout('+')),
            "NumpadMultiply" => Some(EnigoKey::Layout('*')),
            _ => None
        }
    }
}